apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: gateway-api-inference-extension
  annotations:
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"
    pipelinesascode.tekton.dev/on-target-branch: "[main, dev]"
    pipelinesascode.tekton.dev/task: "git-clone"
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/git-status: "true"
    pipelinesascode.tekton.dev/on-cel-expression: >
      (!has(body.ref) || body.ref == 'refs/heads/main' || body.ref == 'refs/heads/dev') &&
      (!has(body.head_commit) || !has(body.head_commit.author) || !body.head_commit.author.name.matches("(?i).*ci-tag-bot.*")) &&
      (!has(body.pull_request) || (body.pull_request.base.ref == 'main' || body.pull_request.base.ref == 'dev'))
spec:
  podTemplate:
    serviceAccountName: pipeline
    securityContext:
      fsGroup: 0
    imagePullSecrets:
      - name: icr-secret
  params:
    - name: runOptional
      value: "true"
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: deleteExisting
      value: "true"
    - name: source_branch
      value: "{{ source_branch }}"
  pipelineSpec:
    results:
      - description: The common vulnerabilities and exposures (CVE) result
        name: SCAN_OUTPUT
        value: $(tasks.vulnerability-scan.results.SCAN_OUTPUT)
    params:
      - name: repo_url
      - name: revision
      - name: deleteExisting
      - name: source_branch
    workspaces:
      - name: source
      - name: basic-auth
      - name: git-auth
      - name: registry-secret
    tasks:
      - name: fix-permissions
        taskSpec:
          workspaces:
            - name: source
              workspace: source
          steps:
            - name: fix
              image: quay.io/projectquay/golang:1.24
              script: |
                #!/bin/sh
                echo "Fixing permissions on /workspace/source..."
                chmod -R 777 /workspace/source || true
        workspaces:
          - name: source
            workspace: source

      - name: read-cluster-name
        taskRef:
          name: read-cluster-name
        runAfter:
          - fix-permissions

      # - name: debug-user
      #   taskSpec:
      #     workspaces:
      #       - name: source
      #         workspace: source
      #     steps:
      #       - name: show-user-info
      #         image: busybox
      #         script: |
      #           #!/bin/sh
      #           echo "Current UID:"
      #           id -u
      #           echo "Current GID:"
      #           id -g
      #           echo "Permissions on /workspace/source:"
      #           ls -ld /workspace/source
      #   workspaces:
      #     - name: source
      #       workspace: source

      - name: which-branch
        taskRef:
          name: print-branch-task
        runAfter:
          - read-cluster-name
        params:
          - name: source-branch
            value: "$(params.source_branch)"
        workspaces:
          - name: source
            workspace: source

      - name: fetch-repository
        taskRef:
          name: git-clone
        runAfter:
          - which-branch
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
          - name: deleteExisting
            value: "$(params.deleteExisting)"

      - name: go-lint
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: go-lint-task
        runAfter:
          - fetch-repository
        workspaces:
          - name: source
            workspace: source

      - name: go-test
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: go-test-task
        runAfter:
          - go-lint
        workspaces:
          - name: source
            workspace: source

      - name: go-build
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: go-build-task
        runAfter:
          - go-test
        workspaces:
          - name: source
            workspace: source

      - name: extract-version-and-registry
        params:
          - name: source-branch  
            value: "$(params.source_branch)"
        runAfter:
          - go-build
        taskRef:
          name: extract-version-and-registry-task
        workspaces:
          - name: source
            workspace: source

      - name: openshift-redeploy-h100
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev", "main"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: notin
            values: ["cluster-platform-eval"]
        taskRef:
          name: openshift-redeploy-task
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
          - name: prod_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.prod-image-tag-base)"
          - name: dev_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.dev-image-tag-base)"
        runAfter:
          - extract-version-and-registry
        workspaces:
          - name: source
            workspace: source

      - name: go-test-post-deploy-h100
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev", "main"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: notin
            values: ["cluster-platform-eval"]
        taskRef:
          name: go-test-post-deploy-task
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
          - name: prod_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.prod-image-tag-base)"
          - name: dev_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.dev-image-tag-base)"
        runAfter:
          - openshift-redeploy-h100
        workspaces:
          - name: source
            workspace: source

      - name: benchmark-h100
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: notin
            values: ["cluster-platform-eval"]
        continueOn:
          errors: true
        params:
          - name: openshift_host
            value: "https://api.fmaas-vllm-d.fmaas.res.ibm.com:6443"
          - name: openshift_namespace
            value: "hc4ai-operator-dev"
        taskRef:
          name: benchmark-task 
        runAfter:
          - go-test-post-deploy-h100

      - name: pipeline-complete-dev-h100
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: notin
            values: ["cluster-platform-eval"]
        runAfter:
          - benchmark-h100
        taskRef:
          name: noop-task

      - name: promote-to-prod
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(params.source_branch)"
            operator: in
            values: ["main"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: promote-to-prod-task
        params:
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: prod_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.prod-image-tag-base)"
          - name: dev_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.dev-image-tag-base)"
        runAfter:
          - extract-version-and-registry
        workspaces:
          - name: registry-secret
            workspace: registry-secret

      - name: buildah-build
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        params:
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: image_tag_base
            value: "$(tasks.extract-version-and-registry.results.dev-image-tag-base)"
        taskRef:
          name: buildah-build-task
        runAfter:
          - extract-version-and-registry
        workspaces:
          - name: source
            workspace: source
          - name: registry
            workspace: registry-secret

      - name: vulnerability-scan
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        runAfter:
          - buildah-build
        taskRef:
          name: trivy-scan
        params:
          - name: IMAGE_URL
            value: "$(tasks.buildah-build.results.image-url)"
          - name: SEVERITY
            value: "CRITICAL,HIGH,MEDIUM,LOW"
          - name: ARGS
            value: "--exit-code 0"
        workspaces:
          - name: registry-secret
            workspace: registry-secret
          - name: output
            workspace: output

      - name: tag-version-after-promotion
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["main"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: tag-version-task
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
        runAfter:
          - promote-to-prod
        workspaces:
          - name: source
            workspace: source
          - name: git-auth
            workspace: git-auth

      - name: tag-version-after-scan
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: tag-version-task
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
        runAfter:
          - vulnerability-scan
        workspaces:
          - name: source
            workspace: source
          - name: git-auth
            workspace: git-auth

      - name: openshift-redeploy-after-promotion
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(params.source_branch)"
            operator: in
            values: ["main"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: openshift-redeploy-task
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
          - name: prod_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.prod-image-tag-base)"
          - name: dev_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.dev-image-tag-base)"
        runAfter:
          - tag-version-after-promotion
        workspaces:
          - name: source
            workspace: source

      - name: openshift-redeploy-after-scan
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: openshift-redeploy-task
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
          - name: prod_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.prod-image-tag-base)"
          - name: dev_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.dev-image-tag-base)"
        runAfter:
          - tag-version-after-scan
        workspaces:
          - name: source
            workspace: source

      - name: go-test-post-deploy-after-promotion
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(params.source_branch)"
            operator: in
            values: ["main"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: go-test-post-deploy-task
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
          - name: prod_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.prod-image-tag-base)"
          - name: dev_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.dev-image-tag-base)"
        runAfter:
          - openshift-redeploy-after-promotion
        workspaces:
          - name: source
            workspace: source

      - name: go-test-post-deploy-after-scan
        when:
          - input: "$(params.runOptional)"
            operator: in
            values: ["true"]
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        taskRef:
          name: go-test-post-deploy-task
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: prod-version
            value: "$(tasks.extract-version-and-registry.results.prod-version)"
          - name: dev-version
            value: "$(tasks.extract-version-and-registry.results.dev-version)"
          - name: prod_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.prod-image-tag-base)"
          - name: dev_image_tag_base
            value: "$(tasks.extract-version-and-registry.results.dev-image-tag-base)"
        runAfter:
          - openshift-redeploy-after-scan
        workspaces:
          - name: source
            workspace: source

      - name: benchmark-after-promotion
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["main"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        continueOn:
          errors: true
        params:
          - name: openshift_host
            value: "https://api.fmaas-platform-eval.fmaas.res.ibm.com:6443"
          - name: openshift_namespace
            value: "hc4ai-operator-dev"
        taskRef:
          name: benchmark-task 
        runAfter:
          - go-test-post-deploy-after-promotion
    
      - name: benchmark-after-scan
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        continueOn:
          errors: true
        params:
          - name: openshift_host
            value: "https://api.fmaas-platform-eval.fmaas.res.ibm.com:6443"
          - name: openshift_namespace
            value: "hc4ai-operator-dev"
        taskRef:
          name: benchmark-task 
        runAfter:
          - go-test-post-deploy-after-scan

      - name: increment-versions-after-promotion
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["main"]
          - input: "$(tasks.read-cluster-name.results.cluster-name)"
            operator: in
            values: ["cluster-platform-eval"]
        params:
          - name: source-branch
            value: "$(params.source_branch)"
          - name: url
            value: $(params.repo_url)
        taskRef:
          name: increment-versions-task
        runAfter:
          - benchmark-after-promotion
        workspaces:
          - name: source
            workspace: source
          - name: git-auth
            workspace: git-auth  

      - name: pipeline-complete-main
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["main"]
        runAfter:
          - increment-versions-after-promotion
        taskRef:
          name: noop-task
  
      - name: pipeline-complete-dev
        when:
          - input: "$(params.source_branch)"
            operator: in
            values: ["dev"]
        runAfter:
          - benchmark-after-scan
        taskRef:
          name: noop-task
       
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: output
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: basic-auth
      secret:
        secretName: "{{ git_auth_secret }}"
    - name: git-auth  
      secret:
        secretName: "git-auth-secret-neuralmagic"
    - name: registry-secret
      secret:
        secretName: quay-secret